{"version":3,"sources":["Component/Searchbar/Searchbar.js","Component/ImageGalleryItem/ImageGalleryItem.js","Component/ImageGallery/ImageGallery.js","Component/Button/Button.js","Component/Modal/Modal.js","Component/Loader/Loader.js","services/imageApi.js","App.js","serviceWorker.js","index.js"],"names":["Searchbar","state","inputValue","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","onSubmit","className","this","type","autoComplete","onChange","autoFocus","placeholder","Component","ImageGalleryItem","webformatURL","tags","modal","onClick","src","alt","ImageGallery","largeImageURL","getURL","onItemClick","gallery","toggleModal","map","image","key","id","React","Button","Modal","handleKeydown","code","closeModal","window","addEventListener","removeEventListener","Loader","color","height","width","searchQuery","page","axios","get","then","response","data","hits","App","loading","error","isModalOpen","fetchImages","imageApi","prevState","catch","finally","handleSearchFormSubmit","query","prevProps","length","scrollTo","top","document","documentElement","scrollHeight","behavior","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.0230b920.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nexport default class Searchbar extends Component {\r\n  state = {\r\n    inputValue: '',\r\n  };\r\n\r\n  //при вводі в input передаємо це значання в state.inputValue\r\n  handleChange = e => {\r\n    this.setState({ inputValue: e.target.value });\r\n  };\r\n\r\n  //передаємо значення inputValue в props.onSubmit, та скидуємо це значення після submit\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onSubmit(this.state.inputValue);\r\n    this.setState({ inputValue: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <header className=\"Searchbar\">\r\n        <form className=\"SearchForm\" onSubmit={this.handleSubmit}>\r\n          <button type=\"submit\" className=\"SearchForm-button\">\r\n            <span className=\"SearchForm-button-label\">Search</span>\r\n          </button>\r\n\r\n          <input\r\n            className=\"SearchForm-input\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            onChange={this.handleChange}\r\n            value={this.state.inputValue}\r\n            autoFocus\r\n            placeholder=\"Search images and photos\"\r\n          />\r\n        </form>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst ImageGalleryItem = ({ webformatURL, tags, modal }) => {\r\n  return (\r\n    <li className=\"ImageGalleryItem\" onClick={modal}>\r\n      <img src={webformatURL} alt={tags} className=\"ImageGalleryItem-image\" />\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ImageGalleryItem;\r\n","import React from 'react';\r\nimport ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem';\r\n\r\nexport default class ImageGallery extends React.Component {\r\n  state = {\r\n    largeImageURL: '',\r\n  };\r\n\r\n  getURL = largeImageURL => {\r\n    this.setState({ largeImageURL: largeImageURL });\r\n    this.props.onItemClick(this.state.largeImageURL);\r\n  };\r\n\r\n  render() {\r\n    const { gallery, toggleModal } = this.props;\r\n\r\n    return (\r\n      <ul className=\"ImageGallery\">\r\n        {gallery.map(image => (\r\n          <ImageGalleryItem\r\n            key={image.id}\r\n            webformatURL={image.webformatURL}\r\n            tags={image.tags}\r\n            modal={() => toggleModal(image.largeImageURL)}\r\n          />\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst Button = ({ onClick }) => {\r\n  return (\r\n    <button type=\"button\" className=\"Button\" onClick={onClick}>\r\n      Load more\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Modal extends Component {\r\n  componentDidMount() {\r\n    window.addEventListener('keydown', this.handleKeydown);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('keydown', this.handleKeydown);\r\n  }\r\n\r\n  handleKeydown = e => {\r\n    if (e.code === 'Escape') {\r\n      this.props.closeModal();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { largeImageURL, closeModal } = this.props;\r\n\r\n    return (\r\n      <div className=\"Overlay\" onClick={closeModal}>\r\n        <div className=\"Modal\">\r\n          <img src={largeImageURL} alt=\"\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport Spinner from 'react-loader-spinner';\r\nexport default class Loader extends React.Component {\r\n  render() {\r\n    return (\r\n      <Spinner type=\"ThreeDots\" color=\"#00BFFF\" height={100} width={100} />\r\n    );\r\n  }\r\n}\r\n","import axios from 'axios';\r\n\r\nconst API_KEY = '17616381-c9f1bd5d2d7147e0d5bf2f873';\r\n\r\nconst fetchImageWithQuery = (searchQuery, page) => {\r\n  return axios\r\n    .get(\r\n      `https://pixabay.com/api/?q=${searchQuery}&page=${page}&key=${API_KEY}&image_type=photo&orientation=horizontal&per_page=12`,\r\n    )\r\n    .then(response => response.data.hits);\r\n};\r\n\r\nexport default {\r\n  fetchImageWithQuery,\r\n};\r\n","import React, { Component } from 'react';\nimport './App.css';\n\n//компоненти\nimport Searchbar from './Component/Searchbar/Searchbar';\nimport ImageGallery from './Component/ImageGallery/ImageGallery';\nimport Button from './Component/Button/Button';\nimport Modal from './Component/Modal/Modal';\nimport Loader from './Component/Loader/Loader';\n\nimport imageApi from './services/imageApi';\n\nclass App extends Component {\n  state = {\n    gallery: [],\n    loading: false,\n    error: null,\n    searchQuery: '',\n    page: 1,\n    largeImageURL: '',\n    isModalOpen: false,\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevQuery = prevState.searchQuery;\n    const nextQuery = this.state.searchQuery;\n    if (prevQuery !== nextQuery) {\n      this.fetchImages();\n    }\n\n    const prevArray = prevState.gallery.length;\n    const nextArray = this.state.gallery.length;\n\n    if (prevArray !== nextArray) {\n      window.scrollTo({\n        top: document.documentElement.scrollHeight,\n        behavior: 'smooth',\n      });\n    }\n  }\n\n  fetchImages = () => {\n    const { searchQuery, page } = this.state;\n    this.setState({ loading: true });\n\n    imageApi\n      .fetchImageWithQuery(searchQuery, page)\n      .then(gallery =>\n        this.setState(prevState => ({\n          gallery: [...prevState.gallery, ...gallery],\n          page: prevState.page + 1,\n        })),\n      )\n      .catch(error => this.setState({ error }))\n      .finally(() => this.setState({ loading: false }));\n  };\n\n  handleSearchFormSubmit = query => {\n    this.setState({\n      searchQuery: query,\n      page: 1,\n      gallery: [],\n    });\n  };\n  toggleModal = largeImageURL => {\n    this.setState({\n      largeImageURL: largeImageURL,\n      isModalOpen: !this.state.isModalOpen,\n    });\n  };\n\n  render() {\n    const { gallery, loading, largeImageURL, isModalOpen } = this.state;\n    return (\n      <div className=\"App\">\n        <Searchbar onSubmit={this.handleSearchFormSubmit} />\n        {gallery.length > 0 && (\n          <ImageGallery gallery={gallery} toggleModal={this.toggleModal} />\n        )}\n        {loading && <Loader />}\n        {gallery.length > 0 && !loading && (\n          <Button onClick={this.fetchImages} />\n        )}\n        {isModalOpen && (\n          <Modal largeImageURL={largeImageURL} closeModal={this.toggleModal} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}